{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mock-data.ts"],"sourcesContent":["import type { Tower, Alert, BatteryCell, PowerSource, PerformanceData } from './types';\n\nfunction generateHistoricalData(days: number): PerformanceData[] {\n  const data = [];\n  for (let i = days - 1; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    data.push({\n      date: date.toISOString().split('T')[0],\n      signalStrength: -60 - Math.floor(Math.random() * 20),\n      userLoad: 100 + Math.floor(Math.random() * 150),\n      uploadSpeed: 20 + Math.floor(Math.random() * 30),\n      downloadSpeed: 100 + Math.floor(Math.random() * 100),\n      energyConsumption: 50 + Math.floor(Math.random() * 25),\n      stateOfCharge: 85 + Math.floor(Math.random() * 15), // Random SoC between 85% and 100%\n      voltage: 53.5 + (Math.random() - 0.5), // Random voltage around 53.5V\n    });\n  }\n  return data;\n}\n\nfunction generateBatteryCells(count: number, isCharging: boolean): BatteryCell[] {\n  const cells = [];\n  for (let i = 1; i <= count; i++) {\n    cells.push({\n      id: i,\n      voltage: parseFloat((3.7 + (Math.random() * 0.5 - 0.25)).toFixed(2)),\n      current: parseFloat((isCharging ? 1 : -1) * Math.random() * 5).toFixed(2),\n      stateOfCharge: Math.floor(80 + Math.random() * 20),\n      temperature: Math.floor(25 + Math.random() * 10),\n      internalResistance: parseFloat((15 + Math.random() * 5).toFixed(2)),\n    });\n  }\n  return cells;\n}\n\n\nexport const mockTowers: Tower[] = [\n  {\n    id: 'TWR-001',\n    name: 'Khalda Tower',\n    location: 'Amman, Jordan',\n    status: 'normal',\n    latitude: 31.9876,\n    longitude: 35.8437,\n    signalStrength: -65,\n    userLoad: 235,\n    uploadSpeed: 45.2,\n    downloadSpeed: 180.5,\n    latency: 22,\n    energyConsumption: 68.5,\n    batteryType: \"Lithium-ion\",\n    batteryCapacity: 200,\n    batteryCells: generateBatteryCells(8, true),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"grid\",\n  },\n  {\n    id: 'TWR-002',\n    name: 'Al-Hashmi Tower',\n    location: 'Irbid, Jordan',\n    status: 'normal',\n    latitude: 32.5568,\n    longitude: 35.8474,\n    signalStrength: -72,\n    userLoad: 180,\n    uploadSpeed: 38.1,\n    downloadSpeed: 155.8,\n    latency: 28,\n    energyConsumption: 62.1,\n    batteryType: \"Lead-acid\",\n    batteryCapacity: 150,\n    batteryCells: generateBatteryCells(6, false),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"solar\",\n  },\n  {\n    id: 'TWR-003',\n    name: 'New Zarqa Tower',\n    location: 'Zarqa, Jordan',\n    status: 'critical',\n    latitude: 32.0740,\n    longitude: 36.0917,\n    signalStrength: -110,\n    userLoad: 0,\n    uploadSpeed: 0,\n    downloadSpeed: 0,\n    latency: 0,\n    energyConsumption: 5.2,\n    batteryType: \"Lithium-ion\",\n    batteryCapacity: 200,\n    batteryCells: generateBatteryCells(8, false).map(c => ({ ...c, voltage: 3.2, current: 0, stateOfCharge: 5 })),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"grid\",\n  },\n  {\n    id: 'TWR-004',\n    name: 'South Beach Tower',\n    location: 'Aqaba, Jordan',\n    status: 'warning',\n    latitude: 29.5321,\n    longitude: 35.0078,\n    signalStrength: -85,\n    userLoad: 75,\n    uploadSpeed: 20.5,\n    downloadSpeed: 90.3,\n    latency: 45,\n    energyConsumption: 55.7,\n    batteryType: \"VRLA\",\n    batteryCapacity: 180,\n    batteryCells: generateBatteryCells(8, true),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"solar\",\n  },\n  {\n    id: 'TWR-005',\n    name: 'Downtown Tower',\n    location: 'Maan, Jordan',\n    status: 'normal',\n    latitude: 30.1925,\n    longitude: 35.7337,\n    signalStrength: -68,\n    userLoad: 210,\n    uploadSpeed: 42.8,\n    downloadSpeed: 175.0,\n    latency: 25,\n    energyConsumption: 71.3,\n    batteryType: \"Lithium-ion\",\n    batteryCapacity: 220,\n    batteryCells: generateBatteryCells(10, false),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"grid\",\n  },\n    {\n    id: 'TWR-006',\n    name: 'Citadel Tower',\n    location: 'Salt, Jordan',\n    status: 'normal',\n    latitude: 32.0392,\n    longitude: 35.7289,\n    signalStrength: -70,\n    userLoad: 280,\n    uploadSpeed: 50.1,\n    downloadSpeed: 210.2,\n    latency: 19,\n    energyConsumption: 75.0,\n    batteryType: \"Lead-acid\",\n    batteryCapacity: 150,\n    batteryCells: generateBatteryCells(6, true),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"grid\",\n  },\n   {\n    id: 'TWR-007',\n    name: 'Mosaic Tower',\n    location: 'Madaba, Jordan',\n    status: 'normal',\n    latitude: 31.7188,\n    longitude: 35.7944,\n    signalStrength: -62,\n    userLoad: 350,\n    uploadSpeed: 55.0,\n    downloadSpeed: 250.0,\n    latency: 18,\n    energyConsumption: 80.2,\n    batteryType: \"Lithium-ion\",\n    batteryCapacity: 250,\n    batteryCells: generateBatteryCells(12, false),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"solar\",\n  },\n   {\n    id: 'TWR-008',\n    name: 'Moabite Tower',\n    location: 'Karak, Jordan',\n    status: 'warning',\n    latitude: 31.1822,\n    longitude: 35.7622,\n    signalStrength: -90,\n    userLoad: 50,\n    uploadSpeed: 15.0,\n    downloadSpeed: 70.5,\n    latency: 50,\n    energyConsumption: 48.9,\n    batteryType: \"VRLA\",\n    batteryCapacity: 180,\n    batteryCells: generateBatteryCells(8, true),\n    historicalData: generateHistoricalData(30),\n    powerSource: \"grid\",\n  },\n];\n\nexport const mockAlerts: Alert[] = [\n    {\n        id: 'ALT-001',\n        towerId: 'TWR-003',\n        towerName: 'New Zarqa Tower',\n        severity: 'critical',\n        message: 'Battery Communication Failure. Cannot read cell data.',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n        id: 'ALT-002',\n        towerId: 'TWR-004',\n        towerName: 'South Beach Tower',\n        severity: 'medium',\n        message: 'Overtemperature detected in battery bank. Cell #3 at 45Â°C.',\n        timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n        id: 'ALT-003',\n        towerId: 'TWR-002',\n        towerName: 'Al-Hashmi Tower',\n        severity: 'high',\n        message: 'Overcurrent Alert: Discharging at 35A. Check for short circuits.',\n        timestamp: new Date(Date.now() - 10 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n        id: 'ALT-004',\n        towerId: 'TWR-008',\n        towerName: 'Moabite Tower',\n        severity: 'medium',\n        message: 'Low State of Health (SoH) on Cell #5. Degraded cell requires review.',\n        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n        id: 'ALT-005',\n        towerId: 'TWR-006',\n        towerName: 'Citadel Tower',\n        severity: 'low',\n        message: 'Maintenance Due Warning: Next checkup scheduled in 7 days.',\n        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n        id: 'ALT-006',\n        towerId: 'TWR-001',\n        towerName: 'Khalda Tower',\n        severity: 'high',\n        message: 'Overvoltage detected on Cell #2. Voltage at 4.25V.',\n        timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n        id: 'ALT-007',\n        towerId: 'TWR-007',\n        towerName: 'Mosaic Tower',\n        severity: 'medium',\n        message: 'Undervoltage Alert on battery bank. Main bus at 47.5V.',\n        timestamp: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n        id: 'ALT-008',\n        towerId: 'TWR-005',\n        towerName: 'Downtown Tower',\n        severity: 'high',\n        message: 'Imbalance detected. Voltage delta between cells > 0.5V.',\n        timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/towers/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { mockTowers } from '@/lib/mock-data';\nimport type { Tower } from '@/lib/types';\n\n// ÙÙ ØªØ·Ø¨ÙÙ Ø­ÙÙÙÙØ Ø³ÙØªÙ Ø§Ø³ØªØ¨Ø¯Ø§Ù ÙØ°Ø§ Ø¨ÙÙØ·Ù ÙØ¬ÙØ¨ Ø§ÙØ¨ÙØ§ÙØ§Øª ÙÙ ÙØ§Ø¹Ø¯Ø© Ø¨ÙØ§ÙØ§Øª\n// ÙØ«Ù Firebase Firestore.\n/*\nimport { db } from '@/lib/firebase';\n*/\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  // ÙØ«Ø§Ù Ø¹ÙÙ Ø¬ÙØ¨ Ø¨Ø±Ø¬ ÙØ§Ø­Ø¯ ÙÙ Firestore\n  /*\n  try {\n    const towerRef = db.collection('towers').doc(params.id);\n    const doc = await towerRef.get();\n    if (!doc.exists) {\n      return NextResponse.json({ message: 'Tower not found' }, { status: 404 });\n    }\n    const tower = { id: doc.id, ...doc.data() } as Tower;\n    return NextResponse.json([tower]); // ÙØªÙ Ø¥Ø±Ø¬Ø§Ø¹ÙØ§ ÙÙØµÙÙÙØ© ÙÙØ­ÙØ§Ø¸ Ø¹ÙÙ Ø§ÙØªÙØ§ÙÙ\n  } catch (error) {\n    console.error(\"Error fetching tower:\", error);\n    return NextResponse.json({ message: 'Failed to fetch tower' }, { status: 500 });\n  }\n  */\n\n  // Ø§ÙÙÙØ¯ Ø§ÙØ­Ø§ÙÙ Ø§ÙØ°Ù ÙØ³ØªØ®Ø¯Ù Ø§ÙØ¨ÙØ§ÙØ§Øª Ø§ÙÙÙÙÙØ©\n  const tower = mockTowers.find(t => t.id === params.id);\n  if (tower) {\n    // ÙØªÙ Ø¥Ø±Ø¬Ø§Ø¹ÙØ§ ÙÙØµÙÙÙØ© ÙÙØ­ÙØ§Ø¸ Ø¹ÙÙ Ø§ÙØªÙØ§ÙÙ ÙØ¹ Ø§ÙØµÙØ­Ø©\n    return NextResponse.json([tower]);\n  } else {\n    return NextResponse.json({ message: 'Tower not found' }, { status: 404 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AASO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,qCAAqC;IACrC;;;;;;;;;;;;;EAaA,GAEA,4CAA4C;IAC5C,MAAM,QAAQ,4HAAA,CAAA,aAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO,EAAE;IACrD,IAAI,OAAO;QACT,mDAAmD;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC;SAAM;IAClC,OAAO;QACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACzE;AACF","debugId":null}}]
}